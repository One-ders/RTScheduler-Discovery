#include <devices.h>
#include <sys.h>
#include <io.h>
#include <string.h>

#include <usb_core.h>


static unsigned int dev_write_empty_tx_fifo(unsigned int epnum) {
	struct usb_dev_ep *ep;
	unsigned int len,wlen;
	unsigned int space_avail;

	ep=&usb_dev->in_ep[epnum];
	len=ep->xfer_len-ep->xfer_count;

	if (len>ep->maxpacket) {
		len=ep->maxpacket;
	}

	wlen=(len+3)/4;
	space_avail=usb_regs->dev.d_ep_in[epnum].txf_sts&EP_IN_TXF_STS_INEPTFSAV_MSK;

	while ((space_avail>wlen) &&
		ep->cfer_count<ep->xfer_len &&
		(ep->xfer_len!=0)) {

		len=ep->xfer_len-ep->xfer_count;
		if (len>ep->maxpacket) {
			len=ep->maxpacket;
		}

		wlen=(len+3)/4;

		write_pkt(epnum,ep->xfer_buf,len);
		ep->xfer_buf+=len;
		ep->xfer_count+=len;
		
		space_avail=usb_regs->dev.d_ep_in[epnum].txf_sts&EP_IN_TXF_STS_INEPTFSAV_MSK;
	}
	return 1;
}

#ifdef DEDICATED_EP1

unsigned int usb_device_EP1_out_handler() {
	unsigned int d_doepint;

	d_doepint=usb_regs->dev.d_ep_out[1].ints;
	d_doepint&=usb_regs->dev.d_oep_each_msk1;

	if (d_doepint&EP_OINT_XFER_DONE) {
		usb_regs->dev.d_ep_out[1].ints=EP_OINT_XFER_DONE;
		if (usb_cfg->dma_enable) {
			unsigned int xfersize=
				usb_regs->dev.d_ep_out[1].tsiz&
					EP_TSIZ_XFRSIZ_MSK;
			usb_dev->out_ep[1].xfer_count=
				usb_dev->out_ep[1].maxpacket - xfersize;
		}
		usb_device_cb->data_out(1);
	}

	if (d_doepint&EP_OINT_DISABLED) {
		usb_regs->dev.d_ep_out[1].ints=EP_OINT_DISABLED;
	}
	return 1;
}


unsigned int usb_device_EP1_in_handler() {
	unsigned int d_diepint;
	unsigned int fifoemptymsk, msk, empty;
	
	msk=usb_regs->dev.d_iep_each_msk1;
	empty=usb_regs->dev.d_iep_empty_msk;
	msk|=(((empty>>1)&1)<<7); // use reserved bit to indicate empty 
	d_diepint=usb_regs->dev.d_ep_in[1].ints & msk;

	if (d_diepint&EP_IINT_XFER_DONE) {
		fifoemptymsk=0x1<<1;
		usb_regs->dev.d_iep_empty_msk&=~fifoemptymsk;
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_XFER_DONE;
		usb_device_cb->data_in(1);
	}

	if (d_diepint&EP_IINT_DISABLED) {
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_DISABLED;
	}

	if (d_diepint&EP_IINT_TIMEOUT) {
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_TIMEOUT;
	}

	if (d_diepint&EP_IINT_ITTXFE) {
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_ITTXFE;
	}

	if (d_diepint&EP_IINT_INEPNE) {
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_INEPNE;
	}

	if (d_diepint&EP_IINT_TXFE) {
		dev_write_empty_tx_fifo(1);
		usb_regs->dev.d_ep_in[1].ints=EP_IINT_TXFE;
	}
	return 1;
}

#endif

static unsigned int device_handle_resume_irq() {

	if (usb_cfg->low_power) {
		unsigned int pwrclk=usb_regs->pwrclk;
		pwrclk=~(PWRCLK_GATECLK|PWRCLK_STOPPCLK);
		usb_regs->pwrclk=pwrclk;
	}
	usb_regs->dev.d_ctl&=~DCTL_RWUSIG;

	usb_device_cb->handle_resume();

	usb_regs->core.g_int_sts=G_INT_STS_WKUIN;

	return 1;
}

static unsigned int device_handle_usb_suspend_irq() {
	unsigned int prev_stat=0;
	unsigned int dev_stat;

	prev_stat=usb_dev->dev_status;
	usb_device_cb->handle_suspend();

	dev_stat=usb_regs->dev.d_sts;
	
	usb_regs->core.g_int_sts=G_INT_STS_USBSUSP;

	if (usb_cfg->low_power&&(dev_stat&DSTS_SUSP)&&
		(usb_dev->conn_status==1) &&
		(prev_status == USB_CONFIGURED)) {
		usb_regs->pwrclk|=PWRCLK_STOPPCLK;
		usb_regs->pwrclk|=PWRCLK_GATECLK;
		// ask OS to bring cpu to sleep
	}
	return 1;
}

static unsigned int device_handle_inep_irq() {
	unsigned int ep_intr;
	unsigned int epnum=0;
	unsigned int fifoempymsk=0;

	ep_intr=dev_read_all_in_ep_irq();
	while(ep_intr) {
		if (ep_intr&0x1) {
			unsigned int diepint=dev_read_in_ep_irq(epnum);
			if (diepint&EP_IINT_XFER_DONE) {
				fifoemptymsk=1<<epnum;
				usb_regs->dev.d_iep_empty_msk&=~fifoemptymsk;
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_XFER_DONE;
				usb_device_cb->data_in(epnum);

				if (usb_cfg->dma_enable) {
					if ((epnum==0)&&(usb_dev->dev_status==USB_DEV_EP0_STATUS_IN)) {
						dev_EP0_out_start();
					}
				}
			}

			if (d_diepint&EP_IINT_TIMEOUT) {
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_TIMEOUT;
			}

			if (d_diepint&EP_IINT_ITTXFE) {
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_ITTXFE;
			}

			if (d_diepint&EP_IINT_INEPNE) {
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_INEPNE;
			}

			if (d_diepint&EP_IINT_DISABLED) {
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_DISABLED;
			}

			if (d_diepint&EP_IINT_TXFE) {
				dev_write_empty_tx_fifo(epnum);
				usb_regs->dev.d_ep_in[epnum].ints=EP_IINT_TXFE;
			}
		}
		epnum++;
		ep_intr >>= 1;
	}
	return 1;
}

static unsigned int device_handle_outep_irq() {
	unsigned int ep_intr;
	unsigned int epnum=0;

	ep_intr=dev_read_all_out_ep_irq();
	
	while(ep_intr) {
		if (ep_intr&0x1) {
			unsigned int doepint=dev_read_out_ep_irq(epnum);
			if (doepint&EP_OINT_XFER_DONE) {
				usb_regs->dev.d_ep_OUT[epnum].ints=EP_OINT_XFER_DONE;
				if (usb_cfg.dma_enable) {
					deptsiz=usb_regs->dev.d_ep_out[epnum].tsiz;
					usb_dev->out_ep[epnum].xfer_count = 
						usb_dev->out_ep[epnum].maxpacket -
						(deptsiz&EP_TSIZ_XFRSIZ_MSK);
				}
				usb_device_cb->data_out(epnum);
				if (usb_cfg.dma_enable) {
					if ((epnum==0)&&(usb_dev->dev_status==USB_DEV_EP0_STATUS_OUT)) {
						dev_EP0_out_start();
					}
				}
			}
			
			if (doepint&EP_OINT_DISABLED) {
				usb_regs->dev.d_ep_OUT[epnum].ints=EP_OINT_DISABLED;
			}

			if (doepint&EP_OINT_SETUP_DONE) {
				usb_device_cb->setup_done(epnum);
				usb_regs->dev.d_ep_OUT[epnum].ints=EP_OINT_SETUP_DONE;
			}
		}
		epnum++;
		ep_intr>>=1;
	}
	return 1;
}

static unsigned int device_handle_sof_irq() {
	usb_device_cb->sof();
	usb_regs->core.g_int_sts=G_INT_STS_SOF;
	return 1;
}

static unsigned int device_handle_rxfifo_irq() {
	unsigned int status;
	struct usb_dev_ep *ep;

	usb_regs->core.g_int_msk&=~G_INT_STS_RXFLVL;
	status=usb_regs->core.g_rx_sts_p;

	ep=&usb_dev->out_ep[status&G_RX_STS_EPNUM_MSK];

	switch((status&G_RX_STS_PKTSTAT_MSK)>>G_RX_STS_PKTSTAT_SHIFT) {
		case G_RX_STS_PKTSTAT_GOUT_NAK:
			break;
		case G_RX_STS_PKTSTAT_ODATA_RECEIVED: {
			unsigned int bcnt=(status&G_RX_STS_BCNT_MSK);
			if (bcnt) {
				bcnt>>=G_RX_STS_BCNT_SHIFT;
				read_pkt(ep->xfer_buf,bcnt);
				ep->xfer_buf+=bcnt;
				ep->xfer_count+=bcnt;
			}
			break;
		}
		case G_RX_STS_PKTSTAT_OXFER_DONE:
			break;
		case G_RX_STS_PKTSTAT_SXFER_DONE:
			break;
		case G_RX_STS_PKTSTAT_SDATA_RECEIVED: {
			unsigned int bcnt=(status&G_RX_STS_BCNT_MSK)>>G_RX_STS_BCNT_SHIFT;
			read_pkt(usb_dev->setup_packet, 8);
			ep->xfer_count += bcnt;
			break;
		}
		default:
			break;
	}
	usb_regs->core.g_int_msk|=G_INT_STS_RXFLVL;
	return 1;
}

unsigned int device_handle_usb_reset_irq() {
	unsigned int i;

	usb_regs->dev.d_ctl&=~DCTL_RWUSIG;

	usb_core_flush_tx_fifo(0);

	for(i=0;i<usb_cfg->dev_endpoints;i++) {
		usb_regs->dev.d_ep_in[i].ints=0xff;
		usb_regs->dev.d_ep_out[i].ints=0xff;
	}

	usb_regs->dev.d_aintmsk=(1<<16)|(1<<0);

	usb_regs->dev.d_doep_msk=
		DDOEPMSK_SETUP|DDOEPMSK_XFER_DONE|DDOEPMSK_EPDISABLED;
#ifdef DEDICATED_EP1
	usb_regs->dev.d_doep_each_msk1=
		DDOEPMSK_SETUP|DDOEPMSK_XFER_DONE|DDOEPMSK_EPDISABLED;
//		DDOEPMSK_XFER_DONE|DDOEPMSK_EPDISABLED;
#endif

	usb_regs->dev.d_diep_msk=
		DDIEPMSK_XFRC|DDIEPMSK_TO|DDIEPMSK_EPD;
#ifdef DEDICATED_EP1
	usb_regs->dev.d_diep_each_msk1=
		DDIEPMSK_XFRC|DDIEPMSK_TO|DDIEPMSK_EPD;
#endif

	usb_regs->dev.d_cfg&=~DCFG_DADDR_MSK;

	dev_EP0_out_start();

	usb_regs->core.g_int_sts=G_INT_STS_USBRST;

	usb_device_cb->reset();

	return 1;
}

static unsigned int device_handle_enum_done_irq() {
	unsigned int usbcfg;
	dev_EP0_activate();

	usbcfg=usb_regs->core.g_usb_cfg;

	if (dev_get_speed()==USB_SPEED_HIGH) {
		usb_cfg->speed=USB_SPEED_HIGH;
		usb_cfg->maxpacketsize=USB_HS_MAX_PACKET_SIZE;
		usbcfg&=~G_USB_CFG_TRDT_MSK;
		usbcfg|=(9<<G_USB_CFG_TRDT_SHIFT)
	} else {
		usb_cfg->speed=USB_SPEED_FULL;
		usb_cfg->maxpacketsize=USB_FS_MAX_PACKET_SIZE;
		usbcfg&=~G_USB_CFG_TRDT_MSK;
		usbcfg|=(5<<G_USB_CFG_TRDT_SHIFT)
	}

	usb_regs->core.g_usb_cfg=usb_cfg;
	usb_regs->core.g_int_sts=G_INT_STS_ENUMDNE;
	return 1;
}

static unsigned int device_handle_incomplete_iso_in_irq() {

	usb_device_cb->iso_in_incomplete();
	usb_regs->core.g_int_sts=G_INT_STS_IISOIXFR;
	return 1;
}

static unsigned int device_handle_incomplete_iso_out_irq() {

	usb_device_cb->iso_out_incomplete();
	usb_regs->core.g_int_sts=G_INT_STS_INCOMPISOOUT;
	return 1;
}

static unsigned int device_handle_session_req_irq() {
	usb_device_cb->dev_connected();
	usb_regs->core.g_int_sts=G_INT_STS_SRQINT;
	return 1;
}

static unsigned int device_handle_otg_irq() {
	unsigned int gotgint=usb_regs->core.g_otg_gint;

	if (gotgint&G_OTG_INT_SEDET) {
		usb_device_cb->dev_disconnected();
	}

	usb_regs->core.g_otg_gint=gotgint;
	return 1;
}

unsigned int handle_device_irq() {
	unsigned int rc=0;

	if (get_mode()!=HOST_MODE) {
		unsigned int gint_status=get_core_irq_stat();
		if (!gint_status) return 0;

		if (gint_status&G_INT_STS_OEPINT) {
			rc|=device_handle_outep_irq();
		}

		if (gint_status&G_INT_STS_IEPINT) {
			rc|=device_handle_inep_irq();
		}

		if (gint_status&G_INT_STS_MMIS) {
			usb_regs->core.g_sts=G_INT_STS_MMIS;
		}

		if (gint_status&G_INT_STS_WKUIN) {
			rc|=device_handle_resume_irq();
		}

		if (gint_status&G_INT_STS_USBSUSP) {
			rc|=device_handle_usb_suspend_irq();
		}

		if (gint_status&G_INT_STS_SOF) {
			rc|=device_handle_sof_irq();
		}

		if (gint_status&G_INT_STS_RXFLVL) {
			rc|=device_handle_rxfifo_irq();
		}

		if (gint_status&G_INT_STS_USBRST) {
			rc|=device_handle_usb_reset_irq();
		}

		if (gint_status&G_INT_STS_ENUMDNE) {
			rc|=device_handle_enum_done_irq();
		}

		if (gint_status&G_INT_STS_IISOIXFR) {
			rc|=device_handle_incomplete_iso_in_irq();
		}

		if (gint_status&G_INT_STS_INCOMPISOOUT) {
			rc|=device_handle_incomplete_iso_out_irq();
		}

		if (gint_status&G_INT_STS_SRQINT) {
			rc|=device_handle_session_req_irq();
		}

		if (gint_status&G_INT_STS_OTGINT) {
			rc|=device_handle_otg_irq();
		}
	}
	return rc;
}
